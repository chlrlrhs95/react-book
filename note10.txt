Chapter 10. 일정관리 웹 애플리케이션 만들기

TodoTemplate: 화면을 가운데에 정렬시켜주며, 일정관리를 보여줍니다.
    children으로 내부 JSX를 props로 받아와서 렌더링 해줍니다.

TodoInsert: 새로운 항목을 입력받고 추가하는 컴포넌트. state를 통해 input의 상태관리.

TodoListItem: 각 할 일 항목에 대한 정보를 보여주는 컴포넌트. todo객체를 props로 받아와서 상태에 따라 다른 스타일의 UI를 보여준다.

TodoList: todos 배열을 props로 받아와서, 이를 여러개의 TodoListItem컴포넌트로 변환하여 보여준다.

진행은 프로젝트 진행을 따라해나가는게 대부분이여서
프로젝트 과정을 제가 따라서 구현한거 보면서 집어 가겠습니다.

css 집에서 집중해서 보고

먼저, 아이템 항목리스트를 화면에 보여줘보자
1. 아이템리스트를 관리하기위해 App컴포넌트에서 useState를 이용하여 todos 상태를 id, text, check를 가진 객체의 배열로 정의.
2. 이 항목을 TodoList에게 props로 전달해준다.
3. TodoList는 TodoListItem으로 각 todo를 props로 전달, 배열이 되기 때문에 key props또한 사용해준다.
4. TodoListItem에서 todo를 받아서 원하는 형태로 UI렌더링

여기서는 체크리스트 형식으로 보여준다. classnames를 이용해서 checkbox일때와 checkbox checked일때를 구분해주었다.

두번째, 항목 추가기능을 구현해보자.
1. 항목을 추가하기위해 입력값의 상태변화에대한 관리를 해야한다.
TodoInsert 컴포넌트에서 setValue를 이용하여 상태관리, 이때 useCallback을 통해 함수의 재사용을 도모한다.
2. todos배열에 새객체를 추가할 때는 id값에 중복이생겨서는 안된다. 그런데 id는 렌더링 될 필요도 없는 값이기 때문에
useRef를 사용해준다.
3. onInsert함수를 생성해주고 TodoInsert에 props로 넘겨준다.
4. TodoInsert에서는 onSubmit이벤트를 통해서 추가로직을 설정해준다.

이때 button의 onClick으로도 할 수 있지만, 이경우에는 onKeyPress이벤트를 통해 'Enter'에대한 이벤트로직또한 따로 작성해야한다.

세번째, 항목 지우기를 구현해보자.
1. id를 파라미터로 받아 삭제하는 함수 구현 ( 이때, filter를 이용하면 해당 id일 경우에만 false를 반환하여 새로운 배열을 반환 반ㄷ을수 있다.)
2. onRemove props로 TodoList에 넘겨준다.
3. TodoList는 TodoListItem에게 넘겨준다.
4. TodoListItem에서는 onRemove(id)함수를 호출한다.

네번째, 항목 수정하기.
1. 동일하게 하면되고 과정을 직접 보자.